Total time: 1.80869 s
File: /workspaces/OuyouZyohoTokuron/network/neuralNet.py
Function: train at line 59

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    59                                               @profile
    60                                               def train(self,charData:dataparser.CharData) -> None:
    61                                                   """
    62                                                   学習用関数
    63                                                   """
    64       200     546174.0   2730.9     30.2          yk = self.forward(charData)
    65       200        432.0      2.2      0.0          yj1 = self.yj1
    66       200      20055.0    100.3      1.1          yi = np.insert(charData.meshFeature, len(charData.meshFeature), 1)
    67       200        419.0      2.1      0.0          yk_hat = charData.ansLabel.ansVec
    68                                           
    69       200        299.0      1.5      0.0          K = self.params.OUTPUT_LAYER_WIDTH
    70       200        241.0      1.2      0.0          J1 = self.params.MIDDLE_LAYER_WIDTH + 1
    71       200        255.0      1.3      0.0          J = self.params.MIDDLE_LAYER_WIDTH
    72       200        229.0      1.1      0.0          I = self.params.INPUT_LAYER_WIDTH + 1
    73                                           
    74                                                   #出力層の更新幅計算
    75       200       1021.0      5.1      0.1          dWkj:np.ndarray = np.zeros(self.Wkj.shape)
    76      4200       5590.0      1.3      0.3          for k in range(K):
    77                                                       """
    78                                                       for j in range(J1):
    79                                                       """
    80      4000      43766.0     10.9      2.4              dWkj[k] = self.params.ETA * (yk_hat[k] - yk[k])*yk[k]*(1-yk[k])*yj1
    81                                           
    82                                           
    83                                                   #中間層の更新幅計算
    84       200       1352.0      6.8      0.1          dWji:np.ndarray = np.zeros(self.Wji.shape)
    85     30200      43517.0      1.4      2.4          for j in range(J):
    86     30000     824749.0     27.5     45.6              tmp = np.sum((yk_hat - yk)*yk*(1-yk)*self.Wkj[:,j])
    87     30000     302974.0     10.1     16.8              dWji[j] = self.params.ETA *yj1[j]*(1 - yj1[j])*yi * tmp
    88                                           
    89                                           
    90                                                   #出力層更新
    91       200       4292.0     21.5      0.2          self.Wkj = self.Wkj + dWkj + self.params.ALPHA*self.dWkj_t_1
    92       200        389.0      1.9      0.0          self.dWkj_t_1 = dWkj
    93                                                   #中間層更新
    94       200      12614.0     63.1      0.7          self.Wji = self.Wji + dWji + self.params.ALPHA*self.dWji_t_1
    95       200        327.0      1.6      0.0          self.dWji_t_1 = dWji

Total time: 2.33893 s
File: /workspaces/OuyouZyohoTokuron/network/neuralNet.py
Function: trainModel at line 114

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   114                                           @profile
   115                                           def trainModel(model:NeuralNet, dataSet:List[dataparser.CharData], TRAIN_LIMIT_L2NORM_DIFF:float):
   116         1          3.0      3.0      0.0      P = len(dataSet)
   117         1          1.0      1.0      0.0      epoch = 0
   118         1          1.0      1.0      0.0      preStepErrRate = 0
   119                                           
   120                                               while True:
   121         5         22.0      4.4      0.0          epoch += 1
   122         5        608.0    121.6      0.0          print("Epoch数:",epoch)
   123                                           
   124                                                   #学習
   125       205      56597.0    276.1      2.4          for p in tqdm(range(P)):
   126       200    1916502.0   9582.5     81.9              model.train(dataSet[p])
   127                                                   
   128                                                   #学習結果と誤差の検証
   129         5         10.0      2.0      0.0          l2ErrRate = 0
   130       205        283.0      1.4      0.0          for p in range(P):
   131       200        500.0      2.5      0.0              yk_hat = dataSet[p].ansLabel.ansVec
   132       200     352727.0   1763.6     15.1              yk = model.forward(dataSet[p])
   133       200        433.0      2.2      0.0              K = len(yk)
   134       200       7817.0     39.1      0.3              l2ErrRate += (((np.linalg.norm(yk_hat - yk))**2)/K)/P
   135                                           
   136         5       1818.0    363.6      0.1          print("平均二乗誤差:", l2ErrRate)
   137         5       1575.0    315.0      0.1          print("改善された誤差:", preStepErrRate - l2ErrRate, "\n")
   138                                                   #誤差が事前に指定した幅から更新されなくなったら収束として停止
   139         5         31.0      6.2      0.0          if abs(preStepErrRate - l2ErrRate) < TRAIN_LIMIT_L2NORM_DIFF:
   140         1          1.0      1.0      0.0              return
   141                                                   
   142         4          4.0      1.0      0.0          preStepErrRate = l2ErrRate